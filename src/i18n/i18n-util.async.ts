// This file was auto-generated by 'typesafe-i18n'. Any manual changes will be overwritten.
/* eslint-disable */

import { initFormatters } from "./formatters.js";
import type { Locales, Namespaces, Translations } from "./i18n-types.js";
import { loadedFormatters, loadedLocales, locales } from "./i18n-util.js";

const localeTranslationLoaders = {
	de: () => import("./de/index.js"),
	en: () => import("./en/index.js"),
	es: () => import("./es/index.js"),
	fr: () => import("./fr/index.js"),
	it: () => import("./it/index.js"),
	ja: () => import("./ja/index.js"),
	ko: () => import("./ko/index.js"),
	"pt-br": () => import("./pt-br/index.js"),
	ru: () => import("./ru/index.js"),
	"zh-hans": () => import("./zh-hans/index.js"),
	"zh-hant": () => import("./zh-hant/index.js"),
};

const localeNamespaceLoaders = {
	de: {
		discord: () => import("./de/discord/index.js"),
		embeds: () => import("./de/embeds/index.js"),
		interactions: () => import("./de/interactions/index.js"),
	},
	en: {
		discord: () => import("./en/discord/index.js"),
		embeds: () => import("./en/embeds/index.js"),
		interactions: () => import("./en/interactions/index.js"),
	},
	es: {
		discord: () => import("./es/discord/index.js"),
		embeds: () => import("./es/embeds/index.js"),
		interactions: () => import("./es/interactions/index.js"),
	},
	fr: {
		discord: () => import("./fr/discord/index.js"),
		embeds: () => import("./fr/embeds/index.js"),
		interactions: () => import("./fr/interactions/index.js"),
	},
	it: {
		discord: () => import("./it/discord/index.js"),
		embeds: () => import("./it/embeds/index.js"),
		interactions: () => import("./it/interactions/index.js"),
	},
	ja: {
		discord: () => import("./ja/discord/index.js"),
		embeds: () => import("./ja/embeds/index.js"),
		interactions: () => import("./ja/interactions/index.js"),
	},
	ko: {
		discord: () => import("./ko/discord/index.js"),
		embeds: () => import("./ko/embeds/index.js"),
		interactions: () => import("./ko/interactions/index.js"),
	},
	"pt-br": {
		discord: () => import("./pt-br/discord/index.js"),
		embeds: () => import("./pt-br/embeds/index.js"),
		interactions: () => import("./pt-br/interactions/index.js"),
	},
	ru: {
		discord: () => import("./ru/discord/index.js"),
		embeds: () => import("./ru/embeds/index.js"),
		interactions: () => import("./ru/interactions/index.js"),
	},
	"zh-hans": {
		discord: () => import("./zh-hans/discord/index.js"),
		embeds: () => import("./zh-hans/embeds/index.js"),
		interactions: () => import("./zh-hans/interactions/index.js"),
	},
	"zh-hant": {
		discord: () => import("./zh-hant/discord/index.js"),
		embeds: () => import("./zh-hant/embeds/index.js"),
		interactions: () => import("./zh-hant/interactions/index.js"),
	},
};

const updateDictionary = (locale: Locales, dictionary: Partial<Translations>): Translations => (loadedLocales[locale] = { ...loadedLocales[locale], ...dictionary });

export const importLocaleAsync = async (locale: Locales): Promise<Translations> => (await localeTranslationLoaders[locale]()).default as unknown as Translations;

export const loadLocaleAsync = async (locale: Locales): Promise<void> => {
	updateDictionary(locale, await importLocaleAsync(locale));
	loadFormatters(locale);
};

export const loadAllLocalesAsync = (): Promise<void[]> => Promise.all(locales.map(loadLocaleAsync));

export const loadFormatters = (locale: Locales): void => void (loadedFormatters[locale] = initFormatters(locale));

export const importNamespaceAsync = async <Namespace extends Namespaces>(locale: Locales, namespace: Namespace) =>
	(await localeNamespaceLoaders[locale][namespace]()).default as unknown as Translations[Namespace];

export const loadNamespaceAsync = async <Namespace extends Namespaces>(locale: Locales, namespace: Namespace): Promise<void> =>
	void updateDictionary(locale, { [namespace]: await importNamespaceAsync(locale, namespace) });
