name: zeki

services:
  bot:
    depends_on:
      - postgres
      - redis
    pull_policy: build
    build:
      context: ../
      dockerfile: .docker/Dockerfile
    image: zeki:latest
    container_name: zeki-bot
    restart: unless-stopped
    environment:
      - TOKEN=${TOKEN}
      - USER_AGENT=${USER_AGENT}
      - POSTGRES_HOST=${POSTGRES_HOST:-postgres}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DATABASE=${POSTGRES_DATABASE:-postgres}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis}
    networks:
      - default

  redis:
    image: redis:7.0.11
    container_name: zeki-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis}
    networks:
      - default
    volumes:
      - redis-data:/data

  postgres:
    image: postgres:13.11
    container_name: zeki-postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 30s
      timeout: 20s
      retries: 3
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DATABASE=${POSTGRES_DATABASE:-postgres}
    networks:
      - default
    volumes:
      - postgres-data:/var/lib/postgresql/data

  backup:
    image: offen/docker-volume-backup:v2.46.0
    container_name: zeki-backup
    restart: unless-stopped
    environment:
      - AWS_S3_BUCKET_NAME=${AWS_S3_BUCKET_NAME}
      - AWS_S3_PATH=${AWS_S3_PATH:-/backups}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_ENDPOINT=${AWS_ENDPOINT}
      - BACKUP_RETENTION_DAYS=7
    networks:
      - default
    volumes:
      - postgres-data:/backup/postgres-data:ro
      - redis-data:/backup/redis-data:ro

networks:
  default:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
