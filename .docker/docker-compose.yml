services:
  bot:
    depends_on:
      - postgres
      - redis
    pull_policy: build
    build:
      context: ../
      dockerfile: .docker/Dockerfile
    container_name: zeki-bot
    restart: unless-stopped
    environment:
      - TOKEN=${TOKEN}
      - USER_AGENT=${USER_AGENT}
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DATABASE=${POSTGRES_DATABASE}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - network

  redis:
    image: redis:7.0.11
    container_name: zeki-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    networks:
      - network
    volumes:
      - redisdata:/data

  postgres:
    image: postgres:13.11
    container_name: zeki-postgres
    restart: unless-stopped
    healthcheck:
      test: [ 'CMD-SHELL', 'pg_isready -U postgres -d postgres' ]
      interval: 30s
      timeout: 20s
      retries: 3
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DATABASE=${POSTGRES_DATABASE}
    networks:
      - network
    volumes:
      - postgresdata:/var/lib/postgresql/data

  backup:
      image: offen/docker-volume-backup:v2.43.1    
      container_name: zeki-backup
      restart: unless-stopped
      environment:
        - AWS_S3_BUCKET_NAME=${AWS_S3_BUCKET_NAME}
        - AWS_S3_PATH=${AWS_S3_PATH}
        - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
        - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
        - AWS_ENDPOINT=${AWS_ENDPOINT}
      volumes:
        - postgres-data:/backup/postgres-data:ro

networks:
  network:
    driver: bridge

volumes:
  postgresdata:
    driver: local
  redisdata:
    driver: local
